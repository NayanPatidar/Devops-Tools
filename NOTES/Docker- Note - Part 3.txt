Working with Docker images and repositries

What is Docker image?
Docker image is made up of filesystems layered over each other. At the base is
a boot filesystems, bootfs, which resembles the typical Linux/Unix boot 
filesystems. 

       Container View
        +------------+
        | Application|
        |   Files    |
        +------------+
              |
        +------------+
        | Image Layer|
        | (Read-Only)|
        +------------+
              |
        +------------+
        | Image Layer|
        | (Read-Only)|
        +------------+
              |
        +------------+
        | Image Layer|
        | (Read-Only)|
        +------------+
              |
        +------------+
        | Base Image |
        | (Read-Only)|
        +------------+
              |
        +------------+
        | Host System|
        | (Read-Only)|
        +------------+


1) The host system is th underlying physical or virtual machien where Docker
is running. It contains system files, libraries, and resources shared
by all containers.

2) The "Base Image" is the initial read-only file containing the 
core operating system. It acts as the foundation for the container's 
filesystem.

3) Every Image layer above the base image represent a additional read-only
layers added during the containers image build process. These layers contain
application-specific files, configurations and other dependancies.

4) The application files are part of this writable layer and can be modifies
by the running application.

- sudo docker rmi centos
rmi is used to remove image which were pulled.

Creating a Dockerfile
make a folder named as static_web
inside that folder create a Dockerfile

Keep the contents of that docker file as 
# Version: 0.0.1
FROM ubuntu:18.04
LABEL maintainer="james@example.com"
RUN apt-get update; apt-get install -y nginx
RUN echo 'Hi, I am in your container' \
>/var/www/html/index.html
EXPOSE 80

# Version: 0.0.1
FROM ubuntu:18.04
--> This sets the base image for your Docker Image as Ubuntu 18.04

LABEL maintainer="james@example.com"
--> This adds a label to the image, specifying the maintainer's 
contact information.

RUN apt-get update; apt-get install -y nginx
--> This RUN instruction updates the package repository using
 apt-get update and then installs the NGINX web server using apt-get 
 install -y nginx.

RUN echo 'Hi, I am in your container' >/var/www/html/index.html
--> This RUN instruction creates a simple HTML file with the content
 "Hi, I am in your container" and writes it to the file /var/www/html/index.html
  within the container. This file will be served by NGINX later.

--> sudo docker build -t="repository.name" .
This will build the image

--> ENTRYPOINT ["/usr/sbin/nginx"]
This sets the default cmd that will be executed when the containers 
start.

--> CMD ["-h]
This instruction is passed to the command.

--> WORKDIR /path/to/directory
It is used to specify the absolute or relative path to the directory



